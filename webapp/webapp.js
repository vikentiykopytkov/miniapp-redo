const tg = window.Telegram?.WebApp;
if (tg) tg.expand();


async function postJSON(url, body) {
const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
if (!res.ok) throw new Error((await res.json()).error || 'request failed');
return res.json();
}


async function checkSub() {
try {
const data = await postJSON('/api/check-sub', { initData: tg?.initData || '' });
document.getElementById('subStatus').textContent = data.ok ? '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–∫' : '‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏';
} catch (e) {
document.getElementById('subStatus').textContent = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
}
}


document.getElementById('checkSub').addEventListener('click', checkSub);


async function spin(tier) {
const resultEl = document.getElementById('result');
resultEl.textContent = '–ö—Ä—É—Ç–∏–º‚Ä¶';


if (tier !== 0) {
try {
const { link } = await postJSON('/api/invoice', { tier });
const open = tg?.openInvoice ? await tg.openInvoice(link) : null;
if (!tg?.openInvoice) window.location.href = link;
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–π—Ç–µ /api/spin
} catch (e) {
resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç';
return;
}
}


try {
const data = await postJSON('/api/spin', { initData: tg?.initData || '', tier });
if (data.result === 'win') {
resultEl.innerHTML = `ü•≥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>${data.prize.title}</b> (—Å—Ç–æ–∏–º–æ—Å—Ç—å ${data.prize.value_stars}‚≠êÔ∏è)`;
} else {
resultEl.textContent = '–ù–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!';
}
} catch (e) {
resultEl.textContent = '–û—à–∏–±–∫–∞ —Å–ø–∏–Ω–∞: ' + (e.message || e);
}
}


document.querySelectorAll('button.spin').forEach(btn => {
btn.addEventListener('click', () => spin(Number(btn.dataset.tier)));
});